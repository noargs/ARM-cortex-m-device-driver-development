
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a48  08000a50  00010a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a48  08000a48  00010a50  2**0
                  CONTENTS
  4 .ARM          00000000  08000a48  08000a48  00010a50  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a48  08000a50  00010a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a48  08000a48  00010a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a4c  08000a4c  00010a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a50  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a50  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ae9  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002af  00000000  00000000  00011569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  000118e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e8a  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010bb  00000000  00000000  0001380a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000088ed  00000000  00000000  000148c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001d1b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000028c  00000000  00000000  0001d204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a30 	.word	0x08000a30

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a30 	.word	0x08000a30

080001e8 <delay>:
#define HIGH                                        1
#define LOW                                         0
#define BTN_PRESSED                                 LOW

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	// introduce ~200ms delay on 16MHz system clock
	for(uint32_t i=0; i < 500000/2; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <main>:

int main (void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_led, gpio_button;
	memset(&gpio_led, 0,sizeof(gpio_led));
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	220c      	movs	r2, #12
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fbfc 	bl	8000a20 <memset>
	memset(&gpio_button, 0, sizeof(gpio_button));
 8000228:	463b      	mov	r3, r7
 800022a:	220c      	movs	r2, #12
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fbf6 	bl	8000a20 <memset>

	// this is LED gpio configuration
	gpio_led.GPIOx = GPIOD; // ((GPIO_RegDef_t*) GPIOD_BASEADDR)
 8000234:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <main+0x8c>)
 8000236:	60fb      	str	r3, [r7, #12]
	gpio_led.GPIO_PinConfig.gpio_pin_number = GPIO_PIN_NO_12;
 8000238:	230c      	movs	r3, #12
 800023a:	743b      	strb	r3, [r7, #16]
	gpio_led.GPIO_PinConfig.gpio_pin_mode = GPIO_MODE_OUT;
 800023c:	2301      	movs	r3, #1
 800023e:	747b      	strb	r3, [r7, #17]
	gpio_led.GPIO_PinConfig.gpio_pin_speed = GPIO_SPEED_LOW;
 8000240:	2300      	movs	r3, #0
 8000242:	74bb      	strb	r3, [r7, #18]
	gpio_led.GPIO_PinConfig.gpio_pin_op_type = GPIO_OP_TYPE_PP;
 8000244:	2300      	movs	r3, #0
 8000246:	753b      	strb	r3, [r7, #20]
	gpio_led.GPIO_PinConfig.gpio_pin_pu_pd_control = GPIO_NO_PUPD;
 8000248:	2300      	movs	r3, #0
 800024a:	74fb      	strb	r3, [r7, #19]

	GPIO_PCLK_Ctrl(GPIOD, ENABLE);
 800024c:	2101      	movs	r1, #1
 800024e:	4814      	ldr	r0, [pc, #80]	; (80002a0 <main+0x8c>)
 8000250:	f000 f862 	bl	8000318 <GPIO_PCLK_Ctrl>
	GPIO_Init(&gpio_led);
 8000254:	f107 030c 	add.w	r3, r7, #12
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f945 	bl	80004e8 <GPIO_Init>

	// this is Button gpio configuration
	gpio_button.GPIOx = GPIOD;
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <main+0x8c>)
 8000260:	603b      	str	r3, [r7, #0]
	gpio_button.GPIO_PinConfig.gpio_pin_number = GPIO_PIN_NO_5;
 8000262:	2305      	movs	r3, #5
 8000264:	713b      	strb	r3, [r7, #4]
	gpio_button.GPIO_PinConfig.gpio_pin_mode = GPIO_MODE_IT_FT;
 8000266:	2304      	movs	r3, #4
 8000268:	717b      	strb	r3, [r7, #5]
	gpio_button.GPIO_PinConfig.gpio_pin_speed = GPIO_SPEED_FAST;
 800026a:	2302      	movs	r3, #2
 800026c:	71bb      	strb	r3, [r7, #6]
	gpio_button.GPIO_PinConfig.gpio_pin_op_type = GPIO_OP_TYPE_PP;
 800026e:	2300      	movs	r3, #0
 8000270:	723b      	strb	r3, [r7, #8]
	gpio_button.GPIO_PinConfig.gpio_pin_pu_pd_control = GPIO_PU;
 8000272:	2301      	movs	r3, #1
 8000274:	71fb      	strb	r3, [r7, #7]

	GPIO_PCLK_Ctrl(GPIOD, ENABLE);
 8000276:	2101      	movs	r1, #1
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <main+0x8c>)
 800027a:	f000 f84d 	bl	8000318 <GPIO_PCLK_Ctrl>
	GPIO_Init(&gpio_button);
 800027e:	463b      	mov	r3, r7
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f931 	bl	80004e8 <GPIO_Init>

	// IRQ configuration to enable
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 8000286:	210f      	movs	r1, #15
 8000288:	2017      	movs	r0, #23
 800028a:	f000 fb5b 	bl	8000944 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	2017      	movs	r0, #23
 8000292:	f000 fad3 	bl	800083c <GPIO_IRQInterruptConfig>

	return 0;
 8000296:	2300      	movs	r3, #0
}
 8000298:	4618      	mov	r0, r3
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40020c00 	.word	0x40020c00

080002a4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	delay(); // 200ms - wait till debouncing gets over
 80002a8:	f7ff ff9e 	bl	80001e8 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_5); // clear the pending event from EXTI line
 80002ac:	2005      	movs	r0, #5
 80002ae:	f000 fb73 	bl	8000998 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80002b2:	210c      	movs	r1, #12
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <EXTI9_5_IRQHandler+0x1c>)
 80002b6:	f000 faab 	bl	8000810 <GPIO_ToggleOutputPin>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 fb71 	bl	80009d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff8d 	bl	8000214 <main>

080002fa <LoopForever>:

LoopForever:
    b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000a50 	.word	0x08000a50
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <GPIO_PCLK_Ctrl>:
 *
 * @return           -
 *
 * @Note             -
 */
void GPIO_PCLK_Ctrl(GPIO_RegDef_t *gpiox, uint8_t en_or_di) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
	if (en_or_di == ENABLE) {
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d162      	bne.n	80003f0 <GPIO_PCLK_Ctrl+0xd8>
		if (gpiox == GPIOA) {
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a64      	ldr	r2, [pc, #400]	; (80004c0 <GPIO_PCLK_Ctrl+0x1a8>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PCLK_Ctrl+0x28>
			GPIOA_PCLK_EN();
 8000332:	4b64      	ldr	r3, [pc, #400]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a63      	ldr	r2, [pc, #396]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (gpiox == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 800033e:	e0b9      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOB) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a61      	ldr	r2, [pc, #388]	; (80004c8 <GPIO_PCLK_Ctrl+0x1b0>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PCLK_Ctrl+0x3e>
			GPIOB_PCLK_EN();
 8000348:	4b5e      	ldr	r3, [pc, #376]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a5d      	ldr	r2, [pc, #372]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e0ae      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOC) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a5c      	ldr	r2, [pc, #368]	; (80004cc <GPIO_PCLK_Ctrl+0x1b4>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PCLK_Ctrl+0x54>
			GPIOC_PCLK_EN();
 800035e:	4b59      	ldr	r3, [pc, #356]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a58      	ldr	r2, [pc, #352]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e0a3      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOD) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a58      	ldr	r2, [pc, #352]	; (80004d0 <GPIO_PCLK_Ctrl+0x1b8>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PCLK_Ctrl+0x6a>
			GPIOD_PCLK_EN();
 8000374:	4b53      	ldr	r3, [pc, #332]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a52      	ldr	r2, [pc, #328]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e098      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOE) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a53      	ldr	r2, [pc, #332]	; (80004d4 <GPIO_PCLK_Ctrl+0x1bc>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PCLK_Ctrl+0x80>
			GPIOE_PCLK_EN();
 800038a:	4b4e      	ldr	r3, [pc, #312]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a4d      	ldr	r2, [pc, #308]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e08d      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOF) {
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a4f      	ldr	r2, [pc, #316]	; (80004d8 <GPIO_PCLK_Ctrl+0x1c0>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PCLK_Ctrl+0x96>
			GPIOF_PCLK_EN();
 80003a0:	4b48      	ldr	r3, [pc, #288]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a47      	ldr	r2, [pc, #284]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e082      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOG) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a4a      	ldr	r2, [pc, #296]	; (80004dc <GPIO_PCLK_Ctrl+0x1c4>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PCLK_Ctrl+0xac>
			GPIOG_PCLK_EN();
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a42      	ldr	r2, [pc, #264]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e077      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOH) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a46      	ldr	r2, [pc, #280]	; (80004e0 <GPIO_PCLK_Ctrl+0x1c8>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PCLK_Ctrl+0xc2>
			GPIOH_PCLK_EN();
 80003cc:	4b3d      	ldr	r3, [pc, #244]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a3c      	ldr	r2, [pc, #240]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e06c      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOI) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a41      	ldr	r2, [pc, #260]	; (80004e4 <GPIO_PCLK_Ctrl+0x1cc>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d168      	bne.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
			GPIOI_PCLK_EN();
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a37      	ldr	r2, [pc, #220]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e061      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		if (gpiox == GPIOA) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a33      	ldr	r2, [pc, #204]	; (80004c0 <GPIO_PCLK_Ctrl+0x1a8>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PCLK_Ctrl+0xee>
			GPIOA_PCLK_DI();
 80003f8:	4b32      	ldr	r3, [pc, #200]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a31      	ldr	r2, [pc, #196]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80003fe:	f023 0301 	bic.w	r3, r3, #1
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e056      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOB) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a2f      	ldr	r2, [pc, #188]	; (80004c8 <GPIO_PCLK_Ctrl+0x1b0>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PCLK_Ctrl+0x104>
			GPIOB_PCLK_DI();
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000414:	f023 0302 	bic.w	r3, r3, #2
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e04b      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOC) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <GPIO_PCLK_Ctrl+0x1b4>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PCLK_Ctrl+0x11a>
			GPIOC_PCLK_DI();
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800042a:	f023 0304 	bic.w	r3, r3, #4
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e040      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOD) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a26      	ldr	r2, [pc, #152]	; (80004d0 <GPIO_PCLK_Ctrl+0x1b8>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PCLK_Ctrl+0x130>
			GPIOD_PCLK_DI();
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000440:	f023 0308 	bic.w	r3, r3, #8
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e035      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOE) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a22      	ldr	r2, [pc, #136]	; (80004d4 <GPIO_PCLK_Ctrl+0x1bc>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PCLK_Ctrl+0x146>
			GPIOE_PCLK_DI();
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a1b      	ldr	r2, [pc, #108]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000456:	f023 0310 	bic.w	r3, r3, #16
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e02a      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOF) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <GPIO_PCLK_Ctrl+0x1c0>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PCLK_Ctrl+0x15c>
			GPIOF_PCLK_DI();
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800046c:	f023 0320 	bic.w	r3, r3, #32
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e01f      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOG) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a19      	ldr	r2, [pc, #100]	; (80004dc <GPIO_PCLK_Ctrl+0x1c4>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PCLK_Ctrl+0x172>
			GPIOG_PCLK_DI();
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e014      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOH) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <GPIO_PCLK_Ctrl+0x1c8>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PCLK_Ctrl+0x188>
			GPIOH_PCLK_DI();
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 8000498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e009      	b.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
		} else if (gpiox == GPIOI) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <GPIO_PCLK_Ctrl+0x1cc>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d105      	bne.n	80004b4 <GPIO_PCLK_Ctrl+0x19c>
			GPIOI_PCLK_DI();
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <GPIO_PCLK_Ctrl+0x1ac>)
 80004ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020400 	.word	0x40020400
 80004cc:	40020800 	.word	0x40020800
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40021400 	.word	0x40021400
 80004dc:	40021800 	.word	0x40021800
 80004e0:	40021c00 	.word	0x40021c00
 80004e4:	40022000 	.word	0x40022000

080004e8 <GPIO_Init>:
 *
 * @return           -
 *
 * @Note             -
 */
void GPIO_Init(GPIO_Handle_t *gpio_handle) {
 80004e8:	b480      	push	{r7}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

	// 1. configure the mode of gpio pin
	if (gpio_handle->GPIO_PinConfig.gpio_pin_mode <= GPIO_MODE_ANALOG) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d81f      	bhi.n	800053c <GPIO_Init+0x54>
		// -[none interrupt mode]-
		temp = (gpio_handle->GPIO_PinConfig.gpio_pin_mode
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	461a      	mov	r2, r3
				<< (2 * gpio_handle->GPIO_PinConfig.gpio_pin_number));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (gpio_handle->GPIO_PinConfig.gpio_pin_mode
 800050c:	617b      	str	r3, [r7, #20]
		gpio_handle->GPIOx->MODER &= ~(0x3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
				<< gpio_handle->GPIO_PinConfig.gpio_pin_number);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	4619      	mov	r1, r3
 800051a:	2303      	movs	r3, #3
 800051c:	408b      	lsls	r3, r1
		gpio_handle->GPIOx->MODER &= ~(0x3
 800051e:	43db      	mvns	r3, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
		gpio_handle->GPIOx->MODER |= temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6819      	ldr	r1, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e0c2      	b.n	80006c2 <GPIO_Init+0x1da>
		//4. Identify the IRQ number on which the processor accepts the interrupt from that pin
		//5. Configure the IRQ priority for the identified IRQ number (Processor side)
		//6. Enable interrupt reception on that IRQ number (Processor side)
		//7. Implement IRQ handler

		if (gpio_handle->GPIO_PinConfig.gpio_pin_mode == GPIO_MODE_IT_FT) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b04      	cmp	r3, #4
 8000542:	d117      	bne.n	8000574 <GPIO_Init+0x8c>
			// configure the FTSR (Falling trigger selection register)
			// FTSR is the register of EXTI
			EXTI->FTSR |= (1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 8000544:	4b47      	ldr	r3, [pc, #284]	; (8000664 <GPIO_Init+0x17c>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	4611      	mov	r1, r2
 8000554:	4a43      	ldr	r2, [pc, #268]	; (8000664 <GPIO_Init+0x17c>)
 8000556:	430b      	orrs	r3, r1
 8000558:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 800055a:	4b42      	ldr	r3, [pc, #264]	; (8000664 <GPIO_Init+0x17c>)
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	7912      	ldrb	r2, [r2, #4]
 8000562:	4611      	mov	r1, r2
 8000564:	2201      	movs	r2, #1
 8000566:	408a      	lsls	r2, r1
 8000568:	43d2      	mvns	r2, r2
 800056a:	4611      	mov	r1, r2
 800056c:	4a3d      	ldr	r2, [pc, #244]	; (8000664 <GPIO_Init+0x17c>)
 800056e:	400b      	ands	r3, r1
 8000570:	6093      	str	r3, [r2, #8]
 8000572:	e035      	b.n	80005e0 <GPIO_Init+0xf8>
		} else if (gpio_handle->GPIO_PinConfig.gpio_pin_mode == GPIO_MODE_IT_RT) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	2b05      	cmp	r3, #5
 800057a:	d117      	bne.n	80005ac <GPIO_Init+0xc4>
			// configure RTSR (Rising trigger selection register
			EXTI->RTSR |= (1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <GPIO_Init+0x17c>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7912      	ldrb	r2, [r2, #4]
 8000584:	4611      	mov	r1, r2
 8000586:	2201      	movs	r2, #1
 8000588:	408a      	lsls	r2, r1
 800058a:	4611      	mov	r1, r2
 800058c:	4a35      	ldr	r2, [pc, #212]	; (8000664 <GPIO_Init+0x17c>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 8000592:	4b34      	ldr	r3, [pc, #208]	; (8000664 <GPIO_Init+0x17c>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <GPIO_Init+0x17c>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
 80005aa:	e019      	b.n	80005e0 <GPIO_Init+0xf8>
		} else if (gpio_handle->GPIO_PinConfig.gpio_pin_mode == GPIO_MODE_IT_RFT) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	2b06      	cmp	r3, #6
 80005b2:	d115      	bne.n	80005e0 <GPIO_Init+0xf8>
			// configure both FTSR and RTSR
			EXTI->FTSR |= (1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 80005b4:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <GPIO_Init+0x17c>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	7912      	ldrb	r2, [r2, #4]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <GPIO_Init+0x17c>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <GPIO_Init+0x17c>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	4611      	mov	r1, r2
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <GPIO_Init+0x17c>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	6093      	str	r3, [r2, #8]
		}
		//2. configure the GPIO port selection in SYSCGF_EXTICR (Sys Config EXTI Control Register)
		//   Which GPIO port should handle by which EXTIx line
		uint8_t temp1 = gpio_handle->GPIO_PinConfig.gpio_pin_number / 4;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = gpio_handle->GPIO_PinConfig.gpio_pin_number % 4;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	f003 0303 	and.w	r3, r3, #3
 80005f0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(gpio_handle->GPIOx);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <GPIO_Init+0x180>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d045      	beq.n	8000688 <GPIO_Init+0x1a0>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <GPIO_Init+0x184>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d02b      	beq.n	800065e <GPIO_Init+0x176>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <GPIO_Init+0x188>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d024      	beq.n	800065a <GPIO_Init+0x172>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a17      	ldr	r2, [pc, #92]	; (8000674 <GPIO_Init+0x18c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d01d      	beq.n	8000656 <GPIO_Init+0x16e>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <GPIO_Init+0x190>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d016      	beq.n	8000652 <GPIO_Init+0x16a>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <GPIO_Init+0x194>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d00f      	beq.n	800064e <GPIO_Init+0x166>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <GPIO_Init+0x198>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d008      	beq.n	800064a <GPIO_Init+0x162>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <GPIO_Init+0x19c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d101      	bne.n	8000646 <GPIO_Init+0x15e>
 8000642:	2307      	movs	r3, #7
 8000644:	e021      	b.n	800068a <GPIO_Init+0x1a2>
 8000646:	2300      	movs	r3, #0
 8000648:	e01f      	b.n	800068a <GPIO_Init+0x1a2>
 800064a:	2306      	movs	r3, #6
 800064c:	e01d      	b.n	800068a <GPIO_Init+0x1a2>
 800064e:	2305      	movs	r3, #5
 8000650:	e01b      	b.n	800068a <GPIO_Init+0x1a2>
 8000652:	2304      	movs	r3, #4
 8000654:	e019      	b.n	800068a <GPIO_Init+0x1a2>
 8000656:	2303      	movs	r3, #3
 8000658:	e017      	b.n	800068a <GPIO_Init+0x1a2>
 800065a:	2302      	movs	r3, #2
 800065c:	e015      	b.n	800068a <GPIO_Init+0x1a2>
 800065e:	2301      	movs	r3, #1
 8000660:	e013      	b.n	800068a <GPIO_Init+0x1a2>
 8000662:	bf00      	nop
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400
 8000670:	40020800 	.word	0x40020800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40021000 	.word	0x40021000
 800067c:	40021400 	.word	0x40021400
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00
 8000688:	2300      	movs	r3, #0
 800068a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800068c:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <GPIO_Init+0x31c>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	4a5c      	ldr	r2, [pc, #368]	; (8000804 <GPIO_Init+0x31c>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000698:	7c7a      	ldrb	r2, [r7, #17]
 800069a:	7cbb      	ldrb	r3, [r7, #18]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	fa02 f103 	lsl.w	r1, r2, r3
 80006a2:	4a59      	ldr	r2, [pc, #356]	; (8000808 <GPIO_Init+0x320>)
 80006a4:	7cfb      	ldrb	r3, [r7, #19]
 80006a6:	3302      	adds	r3, #2
 80006a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << gpio_handle->GPIO_PinConfig.gpio_pin_number);
 80006ac:	4b57      	ldr	r3, [pc, #348]	; (800080c <GPIO_Init+0x324>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a53      	ldr	r2, [pc, #332]	; (800080c <GPIO_Init+0x324>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
	}



	// 2. configure the speed
	temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
	temp = (gpio_handle->GPIO_PinConfig.gpio_pin_speed
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	461a      	mov	r2, r3
			<< (2 * gpio_handle->GPIO_PinConfig.gpio_pin_number));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (gpio_handle->GPIO_PinConfig.gpio_pin_speed
 80006d6:	617b      	str	r3, [r7, #20]
	gpio_handle->GPIOx->OSPEEDR &= ~(0x3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
			<< gpio_handle->GPIO_PinConfig.gpio_pin_number);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	4619      	mov	r1, r3
 80006e4:	2303      	movs	r3, #3
 80006e6:	408b      	lsls	r3, r1
	gpio_handle->GPIOx->OSPEEDR &= ~(0x3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	609a      	str	r2, [r3, #8]
	gpio_handle->GPIOx->OSPEEDR |= temp;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6899      	ldr	r1, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	609a      	str	r2, [r3, #8]


	// 3. configure the pu-pd settings
	temp = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
	temp = (gpio_handle->GPIO_PinConfig.gpio_pin_pu_pd_control
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	79db      	ldrb	r3, [r3, #7]
 800070c:	461a      	mov	r2, r3
			<< (2 * gpio_handle->GPIO_PinConfig.gpio_pin_number));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (gpio_handle->GPIO_PinConfig.gpio_pin_pu_pd_control
 8000718:	617b      	str	r3, [r7, #20]
	gpio_handle->GPIOx->PUPDR &= ~(0x3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68da      	ldr	r2, [r3, #12]
			<< gpio_handle->GPIO_PinConfig.gpio_pin_number);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	4619      	mov	r1, r3
 8000726:	2303      	movs	r3, #3
 8000728:	408b      	lsls	r3, r1
	gpio_handle->GPIOx->PUPDR &= ~(0x3
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	60da      	str	r2, [r3, #12]
	gpio_handle->GPIOx->PUPDR |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	68d9      	ldr	r1, [r3, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	430a      	orrs	r2, r1
 8000744:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
	temp = gpio_handle->GPIO_PinConfig.gpio_pin_op_type
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a1b      	ldrb	r3, [r3, #8]
 800074e:	461a      	mov	r2, r3
			<< gpio_handle->GPIO_PinConfig.gpio_pin_number;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
	temp = gpio_handle->GPIO_PinConfig.gpio_pin_op_type
 8000758:	617b      	str	r3, [r7, #20]
	gpio_handle->GPIOx->OTYPER &= ~(0x1
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	685a      	ldr	r2, [r3, #4]
			<< gpio_handle->GPIO_PinConfig.gpio_pin_number);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	4619      	mov	r1, r3
 8000766:	2301      	movs	r3, #1
 8000768:	408b      	lsls	r3, r1
	gpio_handle->GPIOx->OTYPER &= ~(0x1
 800076a:	43db      	mvns	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	400a      	ands	r2, r1
 8000774:	605a      	str	r2, [r3, #4]
	gpio_handle->GPIOx->OTYPER |= temp;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6859      	ldr	r1, [r3, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	430a      	orrs	r2, r1
 8000784:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if (gpio_handle->GPIO_PinConfig.gpio_pin_mode == GPIO_MODE_ALTFN) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	795b      	ldrb	r3, [r3, #5]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d131      	bne.n	80007f6 <GPIO_Init+0x30e>
		uint8_t temp1, temp2;
		temp1 = gpio_handle->GPIO_PinConfig.gpio_pin_number / 8;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	743b      	strb	r3, [r7, #16]
		temp2 = gpio_handle->GPIO_PinConfig.gpio_pin_number % 8;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	73fb      	strb	r3, [r7, #15]
		gpio_handle->GPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7c3a      	ldrb	r2, [r7, #16]
 80007aa:	3208      	adds	r2, #8
 80007ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	220f      	movs	r2, #15
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	7c3a      	ldrb	r2, [r7, #16]
 80007c4:	4001      	ands	r1, r0
 80007c6:	3208      	adds	r2, #8
 80007c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gpio_handle->GPIOx->AFR[temp1] |=
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7c3a      	ldrb	r2, [r7, #16]
 80007d2:	3208      	adds	r2, #8
 80007d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				(gpio_handle->GPIO_PinConfig.gpio_pin_alt_fun << (4 * temp2));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	461a      	mov	r2, r3
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
		gpio_handle->GPIOx->AFR[temp1] |=
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	4301      	orrs	r1, r0
 80007f0:	3208      	adds	r2, #8
 80007f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80007f6:	bf00      	nop
 80007f8:	371c      	adds	r7, #28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40013800 	.word	0x40013800
 800080c:	40013c00 	.word	0x40013c00

08000810 <GPIO_ToggleOutputPin>:
 *
 * @return           -
 *
 * @Note             -
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *gpiox, uint8_t pin_number) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
//	gpiox->ODR = gpiox->ODR ^ (1 << pin_number);
	gpiox->ODR ^= (1 << pin_number);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	78fa      	ldrb	r2, [r7, #3]
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	405a      	eors	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	615a      	str	r2, [r3, #20]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <GPIO_IRQInterruptConfig>:
 * @Param[in]        - IRQ Number
 * @Param[in]        - ENABLE, DISABLE
 *
 * @return           - void
 */
void GPIO_IRQInterruptConfig(uint8_t irq_number, uint8_t en_or_di) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	if (en_or_di == ENABLE) {
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d167      	bne.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
		if (irq_number <= 31) {
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b1f      	cmp	r3, #31
 8000856:	d80a      	bhi.n	800086e <GPIO_IRQInterruptConfig+0x32>
			// Program ISER0 register Interrupt Set-enable register @ page 220 [Cortex M4 Generic User Guide]
			*NVIC_ISER0 |= (1 << irq_number);
 8000858:	4b35      	ldr	r3, [pc, #212]	; (8000930 <GPIO_IRQInterruptConfig+0xf4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	79fa      	ldrb	r2, [r7, #7]
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	4611      	mov	r1, r2
 8000866:	4a32      	ldr	r2, [pc, #200]	; (8000930 <GPIO_IRQInterruptConfig+0xf4>)
 8000868:	430b      	orrs	r3, r1
 800086a:	6013      	str	r3, [r2, #0]
				// program ICER2 register
				*NVIC_ISER2 |= (1 << (irq_number % 64));
			}
		}
	}
}
 800086c:	e059      	b.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
		} else if (irq_number > 31 && irq_number < 64) {
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b1f      	cmp	r3, #31
 8000872:	d90f      	bls.n	8000894 <GPIO_IRQInterruptConfig+0x58>
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b3f      	cmp	r3, #63	; 0x3f
 8000878:	d80c      	bhi.n	8000894 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (irq_number % 32));
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <GPIO_IRQInterruptConfig+0xf8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	f002 021f 	and.w	r2, r2, #31
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	4611      	mov	r1, r2
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <GPIO_IRQInterruptConfig+0xf8>)
 800088e:	430b      	orrs	r3, r1
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e046      	b.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
		} else if (irq_number >= 64 && irq_number < 96) {
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b3f      	cmp	r3, #63	; 0x3f
 8000898:	d90f      	bls.n	80008ba <GPIO_IRQInterruptConfig+0x7e>
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b5f      	cmp	r3, #95	; 0x5f
 800089e:	d80c      	bhi.n	80008ba <GPIO_IRQInterruptConfig+0x7e>
			*NVIC_ISER2 |= (1 << (irq_number % 64));
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <GPIO_IRQInterruptConfig+0xfc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f202 	lsl.w	r2, r1, r2
 80008b0:	4611      	mov	r1, r2
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <GPIO_IRQInterruptConfig+0xfc>)
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	e033      	b.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
			if (irq_number <= 31) {
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b1f      	cmp	r3, #31
 80008be:	d80a      	bhi.n	80008d6 <GPIO_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= (1 << irq_number);
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <GPIO_IRQInterruptConfig+0x100>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f202 	lsl.w	r2, r1, r2
 80008cc:	4611      	mov	r1, r2
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <GPIO_IRQInterruptConfig+0x100>)
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	e025      	b.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
			} else if (irq_number > 31 && irq_number < 64) {
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b1f      	cmp	r3, #31
 80008da:	d90f      	bls.n	80008fc <GPIO_IRQInterruptConfig+0xc0>
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b3f      	cmp	r3, #63	; 0x3f
 80008e0:	d80c      	bhi.n	80008fc <GPIO_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= (1 << (irq_number % 32));
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <GPIO_IRQInterruptConfig+0x104>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	f002 021f 	and.w	r2, r2, #31
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <GPIO_IRQInterruptConfig+0x104>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e012      	b.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
			} else if (irq_number >= 64 && irq_number < 96) {
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000900:	d90f      	bls.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b5f      	cmp	r3, #95	; 0x5f
 8000906:	d80c      	bhi.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= (1 << (irq_number % 64));
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <GPIO_IRQInterruptConfig+0xfc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000912:	2101      	movs	r1, #1
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <GPIO_IRQInterruptConfig+0xfc>)
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	e7ff      	b.n	8000922 <GPIO_IRQInterruptConfig+0xe6>
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000e104 	.word	0xe000e104
 8000938:	e000e108 	.word	0xe000e108
 800093c:	e000e180 	.word	0xe000e180
 8000940:	e000e184 	.word	0xe000e184

08000944 <GPIO_IRQPriorityConfig>:
 * @Param[in]        -
 * @Param[in]        -
 *
 * @return           - void
 */
void GPIO_IRQPriorityConfig(uint8_t irq_number, uint32_t irq_priority) {
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
	//1. find out the IPR register
	uint8_t iprx = irq_number / 4;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = irq_number % 4;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_by = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	3304      	adds	r3, #4
 8000966:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (irq_priority << shift_by);
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000970:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	7b7b      	ldrb	r3, [r7, #13]
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	409a      	lsls	r2, r3
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000984:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <GPIO_IRQHandling>:
 *
 * @return           -
 *
 * @Note             -
 */
void GPIO_IRQHandling(uint8_t pin_number) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI priority PR register corresponding to the pin number
	if (EXTI->PR & (1 << pin_number)) {
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <GPIO_IRQHandling+0x3c>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	2101      	movs	r1, #1
 80009aa:	fa01 f202 	lsl.w	r2, r1, r2
 80009ae:	4013      	ands	r3, r2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <GPIO_IRQHandling+0x30>
		// clear the pending register, writing 1 to pending register will clear
		EXTI->PR |= (1 << pin_number);
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <GPIO_IRQHandling+0x3c>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <GPIO_IRQHandling+0x3c>)
 80009c4:	430b      	orrs	r3, r1
 80009c6:	6153      	str	r3, [r2, #20]
	}
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40013c00 	.word	0x40013c00

080009d8 <__libc_init_array>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	4d0d      	ldr	r5, [pc, #52]	; (8000a10 <__libc_init_array+0x38>)
 80009dc:	4c0d      	ldr	r4, [pc, #52]	; (8000a14 <__libc_init_array+0x3c>)
 80009de:	1b64      	subs	r4, r4, r5
 80009e0:	10a4      	asrs	r4, r4, #2
 80009e2:	2600      	movs	r6, #0
 80009e4:	42a6      	cmp	r6, r4
 80009e6:	d109      	bne.n	80009fc <__libc_init_array+0x24>
 80009e8:	4d0b      	ldr	r5, [pc, #44]	; (8000a18 <__libc_init_array+0x40>)
 80009ea:	4c0c      	ldr	r4, [pc, #48]	; (8000a1c <__libc_init_array+0x44>)
 80009ec:	f000 f820 	bl	8000a30 <_init>
 80009f0:	1b64      	subs	r4, r4, r5
 80009f2:	10a4      	asrs	r4, r4, #2
 80009f4:	2600      	movs	r6, #0
 80009f6:	42a6      	cmp	r6, r4
 80009f8:	d105      	bne.n	8000a06 <__libc_init_array+0x2e>
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a00:	4798      	blx	r3
 8000a02:	3601      	adds	r6, #1
 8000a04:	e7ee      	b.n	80009e4 <__libc_init_array+0xc>
 8000a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0a:	4798      	blx	r3
 8000a0c:	3601      	adds	r6, #1
 8000a0e:	e7f2      	b.n	80009f6 <__libc_init_array+0x1e>
 8000a10:	08000a48 	.word	0x08000a48
 8000a14:	08000a48 	.word	0x08000a48
 8000a18:	08000a48 	.word	0x08000a48
 8000a1c:	08000a4c 	.word	0x08000a4c

08000a20 <memset>:
 8000a20:	4402      	add	r2, r0
 8000a22:	4603      	mov	r3, r0
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d100      	bne.n	8000a2a <memset+0xa>
 8000a28:	4770      	bx	lr
 8000a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a2e:	e7f9      	b.n	8000a24 <memset+0x4>

08000a30 <_init>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	bf00      	nop
 8000a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	469e      	mov	lr, r3
 8000a3a:	4770      	bx	lr

08000a3c <_fini>:
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	bf00      	nop
 8000a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a42:	bc08      	pop	{r3}
 8000a44:	469e      	mov	lr, r3
 8000a46:	4770      	bx	lr
